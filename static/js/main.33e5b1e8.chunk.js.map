{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","React","useState","guessor","setGuessor","gender","setGender","length","setLength","weight","setWeight","guesses","setGuesses","loading","setLoading","response","setResponse","error","setError","event","a","preventDefault","axios","post","then","res","get","data","catch","err","useEffect","console","log","occurred","type","name","onChange","target","value","onClick","disabled","map","guess","key","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"yIAAAA,EAAOC,QAAU,IAA0B,kC,sKCyI5BC,MApIf,WAAgB,IAAD,EAEiBC,IAAMC,SAAS,IAFhC,mBAENC,EAFM,KAEGC,EAFH,OAGeH,IAAMC,SAAS,IAH9B,mBAGNG,EAHM,KAGEC,EAHF,OAIeL,IAAMC,SAAS,GAJ9B,mBAINK,EAJM,KAIEC,EAJF,OAKeP,IAAMC,SAAS,GAL9B,mBAKNO,EALM,KAKEC,EALF,OAOiBT,IAAMC,WAPvB,mBAONS,EAPM,KAOGC,EAPH,OASiBX,IAAMC,UAAS,GAThC,mBASNW,EATM,KASGC,EATH,OAUmBb,IAAMC,SAAS,IAVlC,mBAUNa,EAVM,KAUIC,EAVJ,OAWaf,IAAMC,SAAS,IAX5B,mBAWNe,EAXM,KAWCC,EAXD,iDAuCb,WAA4BC,GAA5B,SAAAC,EAAA,6DACED,EAAME,iBACNH,EAAS,IACTF,EAAY,IACZF,GAAW,GAJb,SAMQQ,IAAMC,KACV,yEACA,CAAE,QAAWpB,EAAS,OAAUE,EAAQ,UAAaE,EAAQ,UAAaE,IAC1Ee,MAAK,SAAAC,GACLT,EAAY,kCAVhB,uBAaQM,IAAMI,IAAI,mEACfF,MAAK,SAAAC,GACJb,EAAWa,EAAIE,MACfb,GAAW,MAEZc,OAAM,SAAAC,GACLX,EAAS,sBACTJ,GAAW,MApBf,4CAvCa,sBAiEb,OApDAb,IAAM6B,WAAU,WACdR,IAAMI,IAAI,mEACTF,MAAK,SAAAC,GACJM,QAAQC,IAAIP,EAAIE,MAChBf,EAAWa,EAAIE,SACdC,OAAM,SAAAC,GACPE,QAAQC,IAAIf,EAAMgB,eAEnB,IA6CD,6BACI,2CACA,2BACEC,KAAK,OACLC,KAAK,OACLC,SAhDR,SAA0BjB,GACxBf,EAAWe,EAAMkB,OAAOC,QAgDlBA,MAAOnC,IAGT,0CACA,2BACE+B,KAAK,OACLC,KAAK,UACLC,SApDR,SAA4BjB,GAC1Bb,EAAUa,EAAMkB,OAAOC,QAoDjBA,MAAOjC,IAGT,0CACA,2BACE6B,KAAK,OACLC,KAAK,UACLC,SAxDR,SAA4BjB,GAC1BX,EAAUW,EAAMkB,OAAOC,QAwDjBA,MAAO/B,IAGT,0CACA,2BACE2B,KAAK,OACLC,KAAK,UACLC,SA5DR,SAA4BjB,GAC1BT,EAAUS,EAAMkB,OAAOC,QA4DjBA,MAAO7B,IAGT,4BAAQyB,KAAK,SAASK,QAnGf,4CAmGsCC,SAAU3B,GAAvD,QAEEI,GAAS,6BAAMA,GAGfF,GAAY,6BAAMA,GAEpB,+BACE,+BACE,4BACE,uCACA,sCACA,sCACA,wCAGJ,+BACCJ,GAAWA,EAAQ8B,KAAI,SAAAC,GAAU,OAChC,wBAAIC,IAAKD,EAAK,MACZ,4BAAKA,EAAK,SACV,4BAAKA,EAAK,QACV,4BAAKA,EAAK,WACV,4BAAKA,EAAK,mBClHJE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhC,MAAK,SAAAiC,GACJA,EAAaC,gBAEd9B,OAAM,SAAAX,GACLc,QAAQd,MAAMA,EAAM0C,c","file":"static/js/main.33e5b1e8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport axios from 'axios';\n\nfunction App() {\n\n  const [guessor, setGuessor] = React.useState(\"\");\n  const [gender, setGender] = React.useState(\"\");\n  const [length, setLength] = React.useState(0);\n  const [weight, setWeight] = React.useState(0);\n\n  const [guesses, setGuesses] = React.useState();\n\n  const [loading, setLoading] = React.useState(false);\n  const [response, setResponse] = React.useState(\"\");\n  const [error, setError] = React.useState(\"\");\n\n  React.useEffect(() => {\n    axios.get(\"https://tjnz1pstx0.execute-api.ap-southeast-2.amazonaws.com/dev\")\n    .then(res => {\n      console.log(res.data)\n      setGuesses(res.data)\n    }).catch(err => {\n      console.log(error.occurred)\n    })\n  }, [])\n\n  function handleNameChange(event) {\n    setGuessor(event.target.value)\n  };\n\n  function handleGenderChange(event) {\n    setGender(event.target.value)\n  }\n\n  function handleLengthChange(event) {\n    setLength(event.target.value)\n  }\n\n  function handleWeightChange(event) {\n    setWeight(event.target.value)\n  }\n\n  async function handleSubmit(event) {\n    event.preventDefault();\n    setError(\"\")\n    setResponse(\"\")\n    setLoading(true)\n\n    await axios.post(\n      'https://tjnz1pstx0.execute-api.ap-southeast-2.amazonaws.com/dev/create',\n      { \"guessor\": guessor, \"gender\": gender, \"bb_length\": length, \"bb_weight\": weight }\n    ).then(res => {\n      setResponse(\"Successfully saved message.\")\n    })\n\n    await axios.get(\"https://tjnz1pstx0.execute-api.ap-southeast-2.amazonaws.com/dev\")\n    .then(res => {\n      setGuesses(res.data)\n      setLoading(false)\n    })\n    .catch(err => {\n      setError(\"An error occurred.\")\n      setLoading(false)\n    })\n\n  }\n\n\n  return (\n    <div>\n        <label>Guessor:</label>\n        <input\n          type=\"text\"\n          name=\"name\"\n          onChange={handleNameChange}\n          value={guessor}\n        />\n\n        <label>Gender:</label>\n        <input\n          type=\"text\"\n          name=\"message\"\n          onChange={handleGenderChange}\n          value={gender}\n        />\n\n        <label>Height:</label>\n        <input\n          type=\"text\"\n          name=\"message\"\n          onChange={handleLengthChange}\n          value={length}\n        />\n\n        <label>Weight:</label>\n        <input\n          type=\"text\"\n          name=\"message\"\n          onChange={handleWeightChange}\n          value={weight}\n        />\n\n        <button type=\"submit\" onClick={handleSubmit} disabled={loading}>Send</button>\n        {\n          error && <div>{error}</div>\n        }\n        {\n          response && <div>{response}</div>\n        }\n        <table>\n          <thead>\n            <tr>\n              <th>Guessor</th>\n              <th>Gender</th>\n              <th>Weight</th>\n              <th>Length</th>\n            </tr>\n          </thead>\n          <tbody>\n          {guesses && guesses.map(guess => {return (\n            <tr key={guess['date']}>\n              <td>{guess['guessor']}</td>\n              <td>{guess['gender']}</td>\n              <td>{guess['bb_weight']}</td>\n              <td>{guess['bb_length']}</td>\n            </tr>\n          )\n          })}\n          </tbody>\n        </table>\n    </div>\n\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}